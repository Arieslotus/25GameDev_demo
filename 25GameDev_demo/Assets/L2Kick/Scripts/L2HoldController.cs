using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class L2HoldController : MonoBehaviour
{
    [Header("目标设置")]
    [HideInInspector] public Transform noteTarget; // 目标点
    [HideInInspector] public float circleRadius = 2f; // 圆圈的半径

    [Header("移动设置")]
    [HideInInspector] public float moveToAccTime; // 音符从生成点到圆圈边线的时间
    private float moveSpeed; // 计算出的移动速度

    private Vector3 startPosition; // 音符的生成位置
    [HideInInspector] public Vector3 targetPosition; // 音符的目标位置
    private Vector3 accuratePosition;
    private float journeyLength, accJourneyL; // 生成点到目标点的距离
    private float startTime; // 音符开始移动的时间

    public bool isMovingOutsideAcc = true;
    Rigidbody2D rig;
    bool flag = true;

    float myTime = 0;
    [HideInInspector] public float checkRange;
    [HideInInspector] public float perfectCheckRange;
    bool hadAdd = false, hadRemove = false;

    [Header("表现设置")]
    public float rotationSpeed = 50f;
    public float scaleSpeed = 0.5f;
    public float minScale = 0.8f;
    public float maxScale = 1.2f;
    public float targetAlpha = 0.5f;

    private Vector3 initialScale; // 初始缩放值
    private float currentScaleFactor = 1f; // 当前缩放因子
    private bool scalingUp = true; // 是否正在放大

    //hold
    [HideInInspector]
    public bool isFirst;
    public float holdTime;
    bool isHolding;
    float isHoldingTime;
    float hitTime;
    bool isFirstFrame = true;
    bool isSpaceReleased = false; // 是否松开了空格
    private Coroutine holdingCoroutine; // 用于存储协程引用
    //holdrow
    //bool L2CheckList.headHadMiss = false;


    private void Awake()
    {
        gameObject.SetActive(true);
        L2gameController gameController = FindObjectOfType<L2gameController>();
        noteTarget = gameController.noteTarget;
        circleRadius = gameController.accCircleRadius;
        moveToAccTime = gameController.moveToAccTime;
        targetPosition = gameController.cat.transform.position;
        checkRange = gameController.checkTimeRange;
        perfectCheckRange = gameController.perfectCheckTimeRange;

        
    }

    private void OnEnable()
    {
        
    }

    void Start()
    {
        //Debug.Log("checkrange" + checkRange);
        initialScale = transform.localScale;

        myTime = -FindObjectOfType<L2gameController>().moveToAccTime;
        //Debug.Log("myTime" + myTime);
        if (noteTarget == null)
        {
            Debug.LogWarning("请设置目标对象！");
            return;
        }

        // 初始化
        startPosition = transform.position; // 记录生成位置
        accuratePosition = GetIntersectionPointOnCircle(startPosition, noteTarget.position); // 计算（圆圈边线上的点）交点
        journeyLength = Vector3.Distance(startPosition, targetPosition); // 计算距离
        accJourneyL = Vector3.Distance(startPosition, accuratePosition);

        // 根据移动时间和距离计算速度
        moveSpeed = accJourneyL / moveToAccTime;

        // 记录开始移动的时间
        startTime = Time.time;

        rig = GetComponent<Rigidbody2D>();

        if (!isFirst)
        {
            gameObject.transform.localScale *= 0.6f;
        }
        else
        {
            L2CheckList.headHadMiss = false;
        }
    }

    void Update()
    {
        myTime += Time.deltaTime;

        if (isFirst)
        {
            RotateObject();
            ScaleObject();
        }

        //Debug.Log("mytime" + myTime);
        //进入判定区间
        
        if (!hadAdd && myTime > -checkRange / 2)
        {
            this.gameObject.GetComponent<SpriteRenderer>().color = Color.green;
            //在原地停下
            //if (isMovingOutsideAcc)
            //{
            //    targetPosition = accuratePosition;s
            //}
            //else
            //{
            //    targetPosition = transform.position;
            //}
            //Debug.Log("tap1");
            if (isFirst)
            {
                L2CheckList.headCheckList.Add(this);
                L2CheckList.holdCheckList.Add(this);
                hitTime = myTime;

                //
                if (isHolding)
                {
                    if (isFirstFrame)
                    {
                        // 第一帧检测是否按下空格
                        if (Input.GetKey(KeyCode.Space))
                        {
                            isFirstFrame = false;
                        }
                        else
                        {
                            // 第一帧未按下空格，标记为未按下
                            isSpaceReleased = true;
                            isFirstFrame = false;

                        }
                    }
                    else
                    {
                        // Hold 阶段检测是否松开空格
                        if (!Input.GetKey(KeyCode.Space))
                        {
                            // 中途松开空格，标记为松开
                            isSpaceReleased = true;
                        }
                    }
                }
            }
            else
            {
                L2CheckList.holdRow.Add(this);
            }
            hadAdd = true;
        }
        else if (!hadRemove && myTime > checkRange / 2) //出判定区间
        {
            if (isFirst)
            {
                L2CheckList.headCheckList.Remove(this);
                Miss();
            }
            else
            {
                L2CheckList.holdRow.Remove(this);
                Destroy(gameObject);
            }
                hadRemove = true;
        }
        
            //move
        if (isMovingOutsideAcc)
        {
            // 计算已经移动的时间
            float distanceCovered = (Time.time - startTime) * moveSpeed;
            // 计算当前移动的进度（0 到 1 之间）
            float fractionOfAccurateJourney = distanceCovered / accJourneyL;

            if (fractionOfAccurateJourney < 1f)
            {
                transform.position = Vector3.Lerp(startPosition, accuratePosition, fractionOfAccurateJourney);
            }
            else
            {
                // 到达 accuratePosition，开始第二阶段
                isMovingOutsideAcc = false;
                //startTime = Time.time; // 重置开始时间
            }
        }
        else
        {
            // 计算已经移动的时间
            float distanceCovered = (Time.time - startTime) * moveSpeed;
            // 计算当前移动的进度（0 到 1 之间）
            float fractionOfTargetJourney = distanceCovered / journeyLength;

            if (fractionOfTargetJourney < 1f)
            {
                transform.position = Vector3.Lerp(startPosition, targetPosition, fractionOfTargetJourney);
            }
            else
            {
                transform.position = targetPosition;
            }
        }


        //if (!isFirst)
        //{
        //    if (L2CheckList.headHadMiss)
        //    {
        //        //淡出
        //        Color color = GetComponent<SpriteRenderer>().color;
        //        color.a = targetAlpha;
        //        GetComponent<SpriteRenderer>().color = color;
        //    }
        //    if (L2CheckList.holdCheckList.Count == 0 && L2CheckList.headCheckList.Count == 0)
        //    {
        //        //Destroy(gameObject);
        //    }
        //}
    }

    // 计算生成点到目标点的连线与圆圈边线的交点
    private Vector3 GetIntersectionPointOnCircle(Vector3 start, Vector3 end)
    {
        // 计算方向向量
        Vector3 direction = (start - end).normalized;

        // 计算交点
        Vector3 intersectionPoint = noteTarget.position + direction * circleRadius;

        return intersectionPoint;
    }

    public bool CheckNote_Head()
    {
        
        hadRemove = true;
        L2CheckList.headCheckList.Remove(this);
        L2CheckList.holdCheckList.Add(this);
        isHolding = true;
        FindObjectOfType<L2gameController>().JudgeNote(hitTime); // 传入判定时间
        //在原地停下
        //targetPosition = accuratePosition;
        //StartCoroutine(HoldingTimer());
        if (this != null ) // 检查对象是否被销毁!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!?????????????????????????
            holdingCoroutine = StartCoroutine(HoldingTimer());
        return true;
    }


    IEnumerator HoldingTimer()
    {
        //while (isHolding)
        //{
        //    isHoldingTime += Time.deltaTime;
        //    isHolding = false;

        //    if (isHoldingTime >= holdTime)
        //    {
        //        L2CheckList.headCheckList.Remove(this);
        //        foreach(L2HoldController h in L2CheckList.holdRow)
        //        {
        //            Debug.Log("destroy");
        //            Destroy(h.gameObject);
        //        }
        //        L2CheckList.holdRow.Clear();
        //        FindObjectOfType<L2gameController>().JudgeNote(hitTime);
        //        //特效&积分
        //        Destroy(gameObject);
        //        break;
        //    }
        //    yield return 0;
        //}
        //if (isHoldingTime < holdTime)
        //{
        //    Miss();
        //}

        // 等待 holdTime 时间
        //yield return new WaitForSeconds(holdTime);
        //if (this == null || gameObject == null) // 检查对象是否被销毁
        //{
        //    yield break; // 如果对象被销毁，停止协程
        //}
        // 等待 holdTime 时间
        float elapsedTime = 0f;
        while (elapsedTime < holdTime)
        {
            if (this == null || gameObject == null) // 检查对象是否被销毁
            {
                yield break; // 如果对象被销毁，停止协程
            }

            elapsedTime += Time.deltaTime;
            yield return null; // 等待下一帧
        }
        if (this == null || gameObject == null) // 检查对象是否被销毁
        {
            yield break; // 如果对象被销毁，停止协程
        }
        // Hold 完成
        if (isSpaceReleased)
        {
            // 如果松开过空格，触发 Miss
            Miss();
        }
        else
        {
            // 如果一直按住空格，加分并销毁物体
            //FindObjectOfType<L2gameController>().AddScore(); // 加分
            L2CheckList.holdCheckList.Remove(this); // 从 holdCheckList 中移除
            L2CheckList.headCheckList.Remove(this); // 从 holdCheckList 中移除
            Destroy(gameObject);
        }
    }

    void Miss()
    {
        //if (holdingCoroutine != null)
        //{
        //    StopCoroutine(holdingCoroutine); // 停止协程
        //}
        isHolding = false;
        Debug.Log("miss");
        //特效
        //积分
        FindObjectOfType<L2gameController>().MissNote();
        L2CheckList.headCheckList.Remove(this);
        L2CheckList.holdCheckList.Remove(this);
        this.gameObject.GetComponent<SpriteRenderer>().color = Color.red;
        //淡出
        Color color = GetComponent<SpriteRenderer>().color;
        color.a = targetAlpha;
        GetComponent<SpriteRenderer>().color = color;
        /*//其他全删掉
        foreach (L2HoldController h in L2CheckList.holdRow)
        {
            Debug.Log("destroy");
            Destroy(h.gameObject);
        }*/
        L2CheckList.holdRow.Clear();
        //L2CheckList.headHadMiss = true;
        Destroy(gameObject);
    }


    private void RotateObject()
    {
        // 绕 Z 轴旋转
        transform.Rotate(0, 0, rotationSpeed * Time.deltaTime);
    }

    private void ScaleObject()
    {
        // 计算缩放因子
        if (scalingUp)
        {
            currentScaleFactor += scaleSpeed * Time.deltaTime;
            if (currentScaleFactor >= maxScale)
            {
                currentScaleFactor = maxScale;
                scalingUp = false;
            }
        }
        else
        {
            currentScaleFactor -= scaleSpeed * Time.deltaTime;
            if (currentScaleFactor <= minScale)
            {
                currentScaleFactor = minScale;
                scalingUp = true;
            }
        }

        // 应用缩放
        transform.localScale = initialScale * currentScaleFactor;
    }

    //void OnDestroy()
    //{
    //    if (holdingCoroutine != null)
    //    {
    //        StopCoroutine(holdingCoroutine);
    //        holdingCoroutine = null;
    //    }
    //    L2CheckList.holdCheckList.Remove(this);
    //    L2CheckList.headCheckList.Remove(this);
    //}
}
